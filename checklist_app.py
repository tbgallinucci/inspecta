import streamlit as st
import pandas as pd
import json
from datetime import datetime
import uuid
from pathlib import Path
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema de Checklist ODS",
    page_icon="üîß",
    layout="wide"
)

# Inicializa√ß√£o de dados em sess√£o
if 'projetos' not in st.session_state:
    st.session_state.projetos = {}
if 'equipamentos' not in st.session_state:
    st.session_state.equipamentos = {}
if 'checklists' not in st.session_state:
    st.session_state.checklists = {}

# Templates de checklist por fam√≠lia
TEMPLATES_CHECKLIST = {
    "1500": {
        "nome": "Big Ball Valves",
        "items": [
            "Verificar se a v√°lvula est√° de acordo com a especifica√ß√£o t√©cnica (material, classe de press√£o, di√¢metro)",
            "Confirmar se o tipo de conex√£o (flangeada, soldada, rosqueada) est√° conforme especificado",
            "Verificar se a v√°lvula possui certificado de teste hidrost√°tico",
            "Confirmar se o material do corpo da v√°lvula est√° de acordo (Carbon Steel, Stainless Steel, etc.)",
            "Verificar se o material da esfera est√° conforme especifica√ß√£o",
            "Confirmar se os assentos da v√°lvula s√£o adequados para o fluido de processo",
            "Verificar se a v√°lvula possui fire safe design quando aplic√°vel",
            "Confirmar se o atuador (manual ou autom√°tico) est√° de acordo com a especifica√ß√£o",
            "Verificar se as conex√µes de drenagem e ventila√ß√£o est√£o presentes quando especificadas",
            "Confirmar se a marca√ß√£o/TAG da v√°lvula est√° clara e correta",
            "Verificar se h√° certificados de qualidade e rastreabilidade do material",
            "Confirmar se a v√°lvula passou por inspe√ß√£o dimensional",
            "Verificar se n√£o h√° danos externos, riscos ou corros√£o",
            "Confirmar se todas as conex√µes auxiliares est√£o protegidas adequadamente"
        ]
    },
    "3100": {
        "nome": "Turbine",
        "items": [
            "Verificar se o medidor est√° de acordo com a especifica√ß√£o t√©cnica (di√¢metro, classe de press√£o)",
            "Confirmar se o tipo de conex√£o est√° conforme especificado (flangeada, rosqueada)",
            "Verificar se o medidor possui certificado de calibra√ß√£o v√°lido",
            "Confirmar se o material do corpo est√° de acordo com a especifica√ß√£o",
            "Verificar se o rotor e l√¢minas est√£o em perfeitas condi√ß√µes, sem danos ou deforma√ß√µes",
            "Confirmar se os mancais est√£o adequados e lubrificados conforme especifica√ß√£o",
            "Verificar se o sensor de rota√ß√£o (pickup) est√° funcionando corretamente",
            "Confirmar se a eletr√¥nica associada est√° presente e funcional",
            "Verificar se h√° retificadores de fluxo quando especificados",
            "Confirmar se as conex√µes de processo est√£o limpas e sem obstru√ß√µes",
            "Verificar se h√° certificados de teste de desempenho e repetibilidade",
            "Confirmar se a faixa de medi√ß√£o est√° adequada para a aplica√ß√£o",
            "Verificar se n√£o h√° vibra√ß√£o excessiva ou ru√≠dos an√¥malos",
            "Confirmar se a instala√ß√£o permite acesso para manuten√ß√£o",
            "Verificar se h√° prote√ß√£o contra sobre-rota√ß√£o quando aplic√°vel"
        ]
    },
    "6600": {
        "nome": "Transmitters & TW",
        "items": [
            "Verificar se o transmissor est√° de acordo com a especifica√ß√£o t√©cnica",
            "Confirmar se a faixa de medi√ß√£o (range) est√° conforme especificado",
            "Verificar se o sinal de sa√≠da (4-20mA, HART, Fieldbus) est√° correto",
            "Confirmar se a alimenta√ß√£o el√©trica est√° de acordo (24VDC, 110VAC, etc.)",
            "Verificar se h√° certificado de calibra√ß√£o v√°lido e rastre√°vel",
            "Confirmar se a classifica√ß√£o de √°rea (Ex) est√° adequada para instala√ß√£o",
            "Verificar se o material do corpo √© adequado para o ambiente de instala√ß√£o",
            "Confirmar se as conex√µes de processo est√£o conforme especifica√ß√£o",
            "Verificar se h√° prote√ß√£o contra sobrepress√£o quando aplic√°vel",
            "Confirmar se o display local est√° funcionando corretamente (quando aplic√°vel)",
            "Verificar se a configura√ß√£o via software est√° correta",
            "Confirmar se h√° prote√ß√£o IP adequada para ambiente de instala√ß√£o",
            "Verificar se as conex√µes el√©tricas est√£o adequadamente seladas",
            "Confirmar se h√° documenta√ß√£o t√©cnica completa (manual, certificados)",
            "Verificar se n√£o h√° danos externos no inv√≥lucro ou conex√µes",
            "Confirmar se os acess√≥rios (manifold, v√°lvulas) est√£o presentes quando especificados"
        ]
    }
}

FAMILIAS = {
    "1500": "Big Ball Valves",
    "3100": "Turbine", 
    "6600": "Transmitters & TW"
}

def main():
    st.title("üîß Sistema de Checklist ODS")
    st.markdown("**Equipamentos de √ìleo e G√°s**")
    
    # Menu principal
    menu = st.sidebar.selectbox(
        "Menu Principal",
        ["üè† Home", "üìã Executar Checklist", "üìä Consultar Registros", "üìë Relat√≥rios"]
    )
    
    if menu == "üè† Home":
        show_home()
    elif menu == "üìã Executar Checklist":
        show_checklist_execution()
    elif menu == "üìä Consultar Registros":
        show_records()
    elif menu == "üìë Relat√≥rios":
        show_reports()

def show_home():
    st.header("Bem-vindo ao Sistema de Checklist ODS")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Projetos Cadastrados", len(st.session_state.projetos))
    
    with col2:
        st.metric("Equipamentos Registrados", len(st.session_state.equipamentos))
    
    with col3:
        st.metric("Checklists Executados", len(st.session_state.checklists))
    
    st.subheader("Fam√≠lias de Equipamentos (MVP)")
    for codigo, nome in FAMILIAS.items():
        st.write(f"**{codigo}** - {nome}")
    
    st.subheader("Como usar o sistema:")
    st.write("1. üìã **Executar Checklist**: Inicie um novo checklist para um equipamento")
    st.write("2. üìä **Consultar Registros**: Visualize equipamentos e checklists cadastrados")
    st.write("3. üìë **Relat√≥rios**: Gere relat√≥rios detalhados dos checklists")

def show_checklist_execution():
    st.header("üìã Executar Checklist")
    
    # Etapa 1: Projeto
    st.subheader("1. Informa√ß√µes do Projeto")
    
    col1, col2 = st.columns(2)
    
    with col1:
        projeto_numero = st.text_input("N√∫mero do Projeto", placeholder="Ex: P-2024-001")
    
    with col2:
        projeto_existente = projeto_numero in st.session_state.projetos if projeto_numero else False
        if projeto_existente:
            st.success(f"‚úÖ Projeto {projeto_numero} encontrado")
            projeto_nome = st.session_state.projetos[projeto_numero]["nome"]
            cliente = st.session_state.projetos[projeto_numero]["cliente"]
            st.write(f"**Nome:** {projeto_nome}")
            st.write(f"**Cliente:** {cliente}")
        else:
            if projeto_numero:
                st.warning("‚ö†Ô∏è Projeto n√£o encontrado")
                if st.button("‚ûï Criar Novo Projeto"):
                    st.session_state.criar_projeto = True
    
    # Criar novo projeto
    if projeto_numero and not projeto_existente and st.session_state.get('criar_projeto', False):
        st.subheader("Criar Novo Projeto")
        with st.form("novo_projeto"):
            projeto_nome = st.text_input("Nome do Projeto")
            cliente = st.text_input("Cliente")
            
            if st.form_submit_button("Criar Projeto"):
                if projeto_nome and cliente:
                    st.session_state.projetos[projeto_numero] = {
                        "nome": projeto_nome,
                        "cliente": cliente,
                        "data_criacao": datetime.now()
                    }
                    st.success("Projeto criado com sucesso!")
                    st.session_state.criar_projeto = False
                    st.rerun()
                else:
                    st.error("Preencha todos os campos")
    
    # Etapa 2: Equipamento (s√≥ se projeto existir)
    if projeto_numero and projeto_numero in st.session_state.projetos:
        st.subheader("2. Informa√ß√µes do Equipamento")
        
        col1, col2 = st.columns(2)
        
        with col1:
            familia = st.selectbox("Fam√≠lia do Equipamento", 
                                 options=list(FAMILIAS.keys()),
                                 format_func=lambda x: f"{x} - {FAMILIAS[x]}")
        
        with col2:
            tag_equipamento = st.text_input("TAG do Equipamento", placeholder="Ex: FIT-1212001A")
        
        # Verificar se TAG j√° existe
        if tag_equipamento and projeto_numero:
            chave_equipamento = f"{projeto_numero}_{tag_equipamento}"
            tag_existente = chave_equipamento in st.session_state.equipamentos
            
            if tag_existente:
                equipamento = st.session_state.equipamentos[chave_equipamento]
                if equipamento.get("checklist_executado", False):
                    st.error("‚ùå TAG j√° existe e checklist j√° foi executado")
                    return
                else:
                    st.warning("‚ö†Ô∏è TAG existe mas checklist n√£o foi executado. Continuar?")
            
            # Etapa 3: Executar Checklist
            if st.button("üöÄ Iniciar Checklist") or tag_existente:
                execute_checklist(projeto_numero, tag_equipamento, familia)

def execute_checklist(projeto_numero, tag_equipamento, familia):
    st.subheader(f"3. Checklist - {FAMILIAS[familia]}")
    st.write(f"**Projeto:** {projeto_numero}")
    st.write(f"**TAG:** {tag_equipamento}")
    
    template = TEMPLATES_CHECKLIST[familia]
    chave_equipamento = f"{projeto_numero}_{tag_equipamento}"
    
    # Inicializar dados do checklist
    if f"checklist_{chave_equipamento}" not in st.session_state:
        st.session_state[f"checklist_{chave_equipamento}"] = {
            "respostas": {},
            "planos_acao": {},
            "fotos": {}
        }
    
    checklist_data = st.session_state[f"checklist_{chave_equipamento}"]
    
    with st.form(f"checklist_form_{chave_equipamento}"):
        st.write("**Responda cada item do checklist:**")
        
        for i, item in enumerate(template["items"]):
            st.write(f"**{i+1}.** {item}")
            
            col1, col2 = st.columns([3, 1])
            
            with col1:
                resposta = st.radio(
                    f"Resposta {i+1}",
                    ["Conforme", "N√£o Conforme"],
                    key=f"resposta_{i}_{chave_equipamento}",
                    horizontal=True
                )
                checklist_data["respostas"][i] = resposta
            
            with col2:
                foto = st.file_uploader(
                    f"Foto {i+1} (opcional)",
                    type=['jpg', 'jpeg', 'png'],
                    key=f"foto_{i}_{chave_equipamento}"
                )
                if foto:
                    checklist_data["fotos"][i] = foto
            
            # Plano de a√ß√£o para n√£o conformidades
            if resposta == "N√£o Conforme":
                plano_acao = st.text_area(
                    f"Plano de A√ß√£o para item {i+1}",
                    key=f"plano_{i}_{chave_equipamento}",
                    placeholder="Descreva as a√ß√µes necess√°rias para corrigir a n√£o conformidade..."
                )
                checklist_data["planos_acao"][i] = plano_acao
            
            st.divider()
        
        # Finalizar checklist
        if st.form_submit_button("‚úÖ Finalizar Checklist"):
            finalize_checklist(projeto_numero, tag_equipamento, familia, checklist_data)

def finalize_checklist(projeto_numero, tag_equipamento, familia, checklist_data):
    chave_equipamento = f"{projeto_numero}_{tag_equipamento}"
    
    # Calcular estat√≠sticas
    total_items = len(TEMPLATES_CHECKLIST[familia]["items"])
    conformes = sum(1 for resp in checklist_data["respostas"].values() if resp == "Conforme")
    nao_conformes = total_items - conformes
    percentual_conformidade = (conformes / total_items) * 100
    
    # Salvar equipamento
    st.session_state.equipamentos[chave_equipamento] = {
        "projeto": projeto_numero,
        "tag": tag_equipamento,
        "familia": familia,
        "nome_familia": FAMILIAS[familia],
        "data_cadastro": datetime.now(),
        "checklist_executado": True
    }
    
    # Salvar checklist
    checklist_id = str(uuid.uuid4())
    st.session_state.checklists[checklist_id] = {
        "id": checklist_id,
        "equipamento_key": chave_equipamento,
        "projeto": projeto_numero,
        "tag": tag_equipamento,
        "familia": familia,
        "data_execucao": datetime.now(),
        "total_items": total_items,
        "conformes": conformes,
        "nao_conformes": nao_conformes,
        "percentual_conformidade": percentual_conformidade,
        "respostas": checklist_data["respostas"],
        "planos_acao": checklist_data["planos_acao"],
        "fotos": checklist_data["fotos"]
    }
    
    # Limpar dados tempor√°rios
    if f"checklist_{chave_equipamento}" in st.session_state:
        del st.session_state[f"checklist_{chave_equipamento}"]
    
    st.success("‚úÖ Checklist finalizado com sucesso!")
    
    # Mostrar resumo
    st.subheader("üìä Resumo do Checklist")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Total de Itens", total_items)
    with col2:
        st.metric("Conformes", conformes)
    with col3:
        st.metric("N√£o Conformes", nao_conformes)
    
    st.metric("Percentual de Conformidade", f"{percentual_conformidade:.1f}%")
    
    if nao_conformes > 0:
        st.warning(f"‚ö†Ô∏è {nao_conformes} n√£o conformidade(s) identificada(s)")

def show_records():
    st.header("üìä Consultar Registros")
    
    tab1, tab2, tab3 = st.tabs(["Projetos", "Equipamentos", "Checklists"])
    
    with tab1:
        st.subheader("Projetos Cadastrados")
        if st.session_state.projetos:
            projetos_df = pd.DataFrame([
                {
                    "N√∫mero": num,
                    "Nome": dados["nome"],
                    "Cliente": dados["cliente"],
                    "Data Cria√ß√£o": dados["data_criacao"].strftime("%d/%m/%Y %H:%M")
                }
                for num, dados in st.session_state.projetos.items()
            ])
            st.dataframe(projetos_df, use_container_width=True)
        else:
            st.info("Nenhum projeto cadastrado")
    
    with tab2:
        st.subheader("Equipamentos Registrados")
        if st.session_state.equipamentos:
            equipamentos_df = pd.DataFrame([
                {
                    "Projeto": dados["projeto"],
                    "TAG": dados["tag"],
                    "Fam√≠lia": f"{dados['familia']} - {dados['nome_familia']}",
                    "Data Cadastro": dados["data_cadastro"].strftime("%d/%m/%Y %H:%M"),
                    "Checklist": "‚úÖ" if dados["checklist_executado"] else "‚ùå"
                }
                for dados in st.session_state.equipamentos.values()
            ])
            st.dataframe(equipamentos_df, use_container_width=True)
        else:
            st.info("Nenhum equipamento registrado")
    
    with tab3:
        st.subheader("Checklists Executados")
        if st.session_state.checklists:
            checklists_df = pd.DataFrame([
                {
                    "Projeto": dados["projeto"],
                    "TAG": dados["tag"],
                    "Fam√≠lia": f"{dados['familia']} - {FAMILIAS[dados['familia']]}",
                    "Data Execu√ß√£o": dados["data_execucao"].strftime("%d/%m/%Y %H:%M"),
                    "Conformidade": f"{dados['percentual_conformidade']:.1f}%",
                    "N√£o Conformes": dados["nao_conformes"]
                }
                for dados in st.session_state.checklists.values()
            ])
            st.dataframe(checklists_df, use_container_width=True)
        else:
            st.info("Nenhum checklist executado")

def show_reports():
    st.header("üìë Relat√≥rios")
    
    if not st.session_state.checklists:
        st.info("Nenhum checklist dispon√≠vel para relat√≥rio")
        return
    
    # Seletor de checklist
    checklist_options = {
        dados["id"]: f"{dados['projeto']} - {dados['tag']} ({dados['data_execucao'].strftime('%d/%m/%Y')})"
        for dados in st.session_state.checklists.values()
    }
    
    selected_checklist = st.selectbox(
        "Selecione um checklist para gerar relat√≥rio:",
        options=list(checklist_options.keys()),
        format_func=lambda x: checklist_options[x]
    )
    
    if selected_checklist:
        generate_report(selected_checklist)

def generate_report(checklist_id):
    checklist = st.session_state.checklists[checklist_id]
    projeto = st.session_state.projetos[checklist["projeto"]]
    
    st.subheader("üìã Relat√≥rio de Checklist")
    
    # Cabe√ßalho do relat√≥rio
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Informa√ß√µes do Projeto:**")
        st.write(f"‚Ä¢ N√∫mero: {checklist['projeto']}")
        st.write(f"‚Ä¢ Nome: {projeto['nome']}")
        st.write(f"‚Ä¢ Cliente: {projeto['cliente']}")
    
    with col2:
        st.write("**Informa√ß√µes do Equipamento:**")
        st.write(f"‚Ä¢ TAG: {checklist['tag']}")
        st.write(f"‚Ä¢ Fam√≠lia: {checklist['familia']} - {FAMILIAS[checklist['familia']]}")
        st.write(f"‚Ä¢ Data Execu√ß√£o: {checklist['data_execucao'].strftime('%d/%m/%Y %H:%M')}")
    
    # Estat√≠sticas
    st.subheader("üìä Resultados do Checklist")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total de Itens", checklist["total_items"])
    with col2:
        st.metric("Conformes", checklist["conformes"])
    with col3:
        st.metric("N√£o Conformes", checklist["nao_conformes"])
    with col4:
        st.metric("Conformidade", f"{checklist['percentual_conformidade']:.1f}%")
    
    # Detalhamento dos itens
    st.subheader("üìù Detalhamento dos Itens")
    template = TEMPLATES_CHECKLIST[checklist["familia"]]
    
    for i, item in enumerate(template["items"]):
        resposta = checklist["respostas"].get(i, "N√£o respondido")
        
        if resposta == "Conforme":
            st.success(f"‚úÖ **Item {i+1}:** {item}")
        elif resposta == "N√£o Conforme":
            st.error(f"‚ùå **Item {i+1}:** {item}")
            if i in checklist["planos_acao"] and checklist["planos_acao"][i]:
                st.write(f"**Plano de A√ß√£o:** {checklist['planos_acao'][i]}")
        else:
            st.warning(f"‚ö†Ô∏è **Item {i+1}:** {item} - {resposta}")
    
    # Planos de a√ß√£o consolidados
    if checklist["nao_conformes"] > 0:
        st.subheader("üîß Planos de A√ß√£o")
        for i, plano in checklist["planos_acao"].items():
            if plano:
                st.write(f"**Item {i+1}:** {plano}")

if __name__ == "__main__":
    main()